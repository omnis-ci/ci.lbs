Do $cinst.$getCLIArgument(2) Returns lcSourcePath
Do $cinst.$getCLIArgument(3) Returns lcDestination

# Validate the source exists
Calculate lcLibraryJson as con(lcSourcePath,pathsep(),"library.json")
If $cinst.$_fileExists(lcLibraryJson)=kFalse
	Do $cinst.$writeStderr(con($cinst.$kRed(),"No library.json found at ",kSq,lcSourcePath,kSq,$cinst.$kReset()))
	Quit method 1
End If

# Validate the parent for the destination does exist
Calculate lcDestinationParent as FileOps.$parentdir(lcDestination)
If $cinst.$_fileExists(lcDestinationParent)=kFalse
	Do $cinst.$writeStderr(con($cinst.$kRed(),kSq,lcDestinationParent,kSq," does not exist for writing ",kSq,lcDestination,kSq,$cinst.$kReset()))
	Quit method 2
End If

# Validate the destination does not exist
If $cinst.$_fileExists(lcDestination)=kTrue
	Do $cinst.$writeStderr(con($cinst.$kRed(),"The destination ",kSq,lcDestination,kSq," must not already exist",$cinst.$kReset()))
	Quit method 3
End If

# Import from JSON
Do $cinst.$_importJSON(lcSourcePath,lcDestination,llErrors,llWarnings) Returns lbOK

# Output warnings
For llWarnings.$line from 1 to llWarnings.$linecount step 1
	Do $cinst.$writeStderr(con($cinst.$kYellow(),"Warning for ",$cinst.$kReset(),llWarnings.pathname,".",llWarnings.lineno,$cinst.$kYellow(),": ",$cinst.$kReset(),llWarnings.errorcode," ",llWarnings.errortext))
End For

# Output errors
For llErrors.$line from 1 to llErrors.$linecount step 1
	Do $cinst.$writeStderr(con($cinst.$kRed(),"Error for ",$cinst.$kReset(),llErrors.pathname,".",llErrors.lineno,$cinst.$kRed(),": ",$cinst.$kReset(),llErrors.errorcode," ",llErrors.errortext))
End For

# Return success or failure
If lbOK=kFalse
	Do $cinst.$writeStdout("Import failed")
	Quit method 4
End If

Do $cinst.$writeStdout("Import complete")
Quit method 0